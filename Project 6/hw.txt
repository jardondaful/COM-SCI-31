1) 

    part a)

    The statements in parentheses denote the errors in the code's corresponding line(s) and say "BUG:" 
    before the explanation. They are shown below:

    int main()
    {
        int arr[3] = { 5, 10, 15 };
        int* ptr = arr;

        *ptr = 30;          // set arr[0] to 30
        *ptr + 1 = 20;      // set arr[1] to 20 (BUG: the term ptr+1 should have parentheses around it)
        ptr += 2;
        ptr[0] = 10;        // set arr[2] to 10 (BUG: the line of code should just set *ptr equal to 10 instead)

        while (ptr >= arr) (BUG: the while loop prints the array in reversed order)
        {
            ptr--; 
            cout << *ptr << endl;    
        }
    }


    A fixed version of the function is as below:

    int main()
    {
	    int arr[3] = { 5, 10, 15 };
	    int* ptr = arr;

	    *ptr = 30;          // set arr[0] to 30
	    *(ptr + 1) = 20;      // set arr[1] to 20
	    ptr += 2;
	    *ptr = 10;        // set arr[2] to 10
	
	    ptr = arr;	//resets ptr to arr[0]
	    while (ptr <= (arr + 2))
	    {
		    cout << *ptr << endl;    // prints values
		    ptr++;
	    }
    }



    part b)

    The function will not behave as expected (aka find the maximum item in an array and set the pToMax parameter to point 
    to that item) because the function only passes the pointer parameter pToMax's value and deletes any changes made to 
    pToMax upon reaching the end of the function. To fix this issue, the function header should pass a reference parameter instead of a pointer parameter and the function should be written as the following:

      void findMax(int arr[], int n, int* &pToMax)
      {
        if (n <= 0) 
          return;      // no items, no maximum!
    
        pToMax = arr;

        for (int i = 1; i < n; i++)
        {
          if (arr[i] > *pToMax)
            pToMax = arr + i;
        }
      } 



    part c)

    The problem with the main() function's implementation of the findMax() function is that the pointer ptr
    is not initialized to any value. This means that nothing can be stored to where ptr is supposed to point. 
    To fix this, an integer of no value should be declated before ptr is declared and ptr should be set equal 
    to the reference of the integer variable. The main function should look like the following:
    
        int main()
        {
            int n;
            int* ptr = &n;
            computeCube(5, ptr);
            cout<<"Five cubed is " << *ptr<<endl;
        }
    


    part d)

    The problem with the current implementation of strequal() is that str1 and str2 are pointers and should therefore be 
    dereferenced to be compared, have their values be checked against 0, and have their positions be incremented. The 
    correct implementation of strequal() is the following:

        bool strequal(const char str1[], const char str2[])
        {
            while(*str1!=0 && *str2!=0)
            {
                if(*str1 != str2)
                {
                    return false;
                }
                str1++;
                str2++;
            }
            return *str1 == *str2;
        }
    
    
    part e)

    The program is failing because of undefined behavior. When the function getPtrToArray() gets called on, the varaible 
    anAarray is made local to the function and is cleared from memory. This makes the values that exist at the memory 
    address pointed to by ptr undefined.Additionally, when the function f() is called on, it assigns garbage values in the 
    memory spaces previously allocated to by anArray.




2) 
    part a)
        double *cat;
    
    part b)
        double mouse[5];

    part c)
        cat = mouse + 4;

    part d)
        *cat = 25;

    part e)
        *(mouse + 3) = 54;

    part f)
        cat -= 3;
    
    part g)
        cat[1] = 27;

    part h)
        cat[0] = 42;

    part i)
        bool d = (cat == mouse);

    part j)
        bool b = (*cat == *(cat+1));




3) 

    part a)

        My corrected mean() funciton is shown below:

        double mean(const double *scores, int numScores)
        {
            double tot = 0;
            for(int i = 0; i < numScores; i++)
            {
                tot += *(scores + i);
            }
            return tot / numScores;
        }

    part b)
        My corrected findTheChar() function is shown below: 

        const char* findTheChar(const char *str, char chr)
        {
            for(int k = 0; *(str+k)!=0; k++)
            {
                if(*(str+k)==chr)
                {
                    return str+k;
                }
            }
            return nullptr;
        }

    part c)
        My rewritten findTheChar() is shown below: 

        const char* findTheChar(const char *str, char chr)
        {
            for(; *str!=0; str++)
            {
                if(*str==chr)
                {
                    return str;
                }
            }
            return nullptr;
        }


4) 

    The maxwell() function takes in two local pointers as parameters and returns either whichever pointer points to the greater value or pointer b if 
    the values that both pointers a and b point to are equal. The swap1() function takes in two local pointers as parameters and swaps them  in the scope
    of the function, which will not affect the order of the elements of the main() funciton's array or the elements of array themselves. The swap2() 
    function takes in two local pointers as parameters and swaps the values that the loal pointers a and b are pointing to, which successfully swaps elements 
    in the main() function's array. 

    The affecting of the output of the code starts with the line int *ptr = maxwell(array, &array[2]), which declares the variable ptr, intializes it as a pointer,
    and sets it to the first element of the main() function's array (which is named array) since array > &array[2]. The next line "*ptr = -1;" then sets the element 
    in the array that ptr is pointing to (which is array[0]) as -1. The next line "ptr += 2;" then moves ptr to &array[2], which makes the next line "ptr[1] = 9;" set 
    array[3] equal to 9 and the line after that "*(array + 1) = 79" set array[1] equal to 79. The next line of code "cout << &array[5] - ptr << endl;" produces the program's 
    first line of output, which is 3 because (&array[5] - &array[2]) = (array + 5) - (array + 2) = 3.  The next line of code "swap1(&array[0], &array[1]);" does 
    not do anything since as described in the previous paragraph, the function swap1() itself does not work. The next line of code "swap2(array, &array[2]);" swaps the values 
    of array[0] and array[2], which are -1 and 4. The manipulation of the array is now done, and the array is now {4, 79, -1, 9, 22, 19}. The last of the code in the main() 
    function prints out eac of the elements of array in order and on a new line, which makes the output of the code the following:

    3
    4
    79
    -1
    9
    22
    19

    The comments in the code will also explain how the code will reach the output's results. They are in the following code:

    #include <iostream>
    using namespace std;

    int *maxwell(int *a, int *b) // returns the pointer that points to the greater value. However, if they are equal, the function returns b
    {

        if (*a > *b)
        {
            return a;
        }
        else
        {
            return b;
        }
    }

    void swap1(int *a, int *b) // swaps local pointers in the scope of the function, which does not impact any output
    {
        int *temp = a;
        a = b;
        b = temp;
    }

    void swap2(int *a, int *b) // correctly swaps the values that the local pointers a and bn are pointing to
    {
        int temp = *a;
        *a = *b;
        *b = temp;
    }

    int main()
    {
        int array[6] = {5, 3, 4, 17, 22, 19}; // declares and initializes an array containg the integers 5, 3, 4, 17, 22, and 19

        int *ptr = maxwell(array, &array[2]); // declares the variable ptr, initializes it as a pointer, and sets it to array[0] (aka 5) since array[0] > &array[2]
        *ptr = -1;                            // sets the element in the array that ptr points to as -1 (aka sets array[0] to -1)
        ptr += 2;                             // moves ptr to &array[2]
        ptr[1] = 9;                           // sets array[3] equal to 9
        *(array + 1) = 79;                    // sets array[1] equal to 79

        cout << &array[5] - ptr << endl; // prints the value of &array[5] - &array[2], which is 3 because (&array[5] - &array[2]) = (array + 5) - (array + 2)

        swap1(&array[0], &array[1]); // doesn't do anything because the function swap1() itself does not work
        swap2(array, &array[2]);     // swaps the values of array[0] and array[2] (aka swaps -1 and 4)

        for (int i = 0; i < 6; i++)
        cout << array[i] << endl; // prints out each value of the array in order from the first to last element, which are now in the following order: 4, 79, -1, 9, 22, 19
    }




5)
    My removeS() function is written below:

    void removeS(char *a)
    {
        char *b = a;
        for (; *a != '\0'; a++)
        {
            if (*a != 'S' && *a != 's')
            {
                *b = *a;
                b++;
            }
        }
        *b = 0;
    }
