part a)

One major obstacle that I had to overcome when making this project was 
involved in creating the hasCorrectForm() function since I initially 
could not think up a way to consistently identify which parts of the 
plan string were plan portions. To fix this, I changed from using a 
for loop to a while loop and iterating the counter variable I depeneding 
on what type of plan portion the program is currently processing. I 
iterated the counter by 1 if the plan portion is valid and only consists 
of one valid direction letter, iterated the counter by 2 if the plan 
portion is valid and only consists of one number followed by one valid 
direction letter, and iterated the counter by 3 if the plan portion is 
valid and only consists of two numbers followed by one valid direction 
letter.

The second major obstacle I had to overcome when making this project was 
involved in creating the determineSafeDistance() function since I 
initially had a hard time have the function take into consideration the 
car going in any of the four directions (north, south, east, or west). To 
combat this, I made one smaller function that takes care of calculations 
of the car's movement for a specific direction for each of the four 
direction. I then called one of the four functions in the 
determineSafeDistace() function depending on the given direction letter 
parameter.

The third major obstacle I had to overcome when aking project was letting 
the obeyPlan() function know when the car needed to change directions. To 
overcome this obstacle, I had to change dir directly with multiple if else 
statements depending on the current character that the loop is in for the 
plan string. If the turn letter indicated left, then I changed dir 
corresponding to the letter directly adjacent to it on a compass when 
going counterclockwise on the compass. If the turn letter indicated right, 
then I changed dir corresponding to the letter directly adjacent to it on 
a compass when going clockwise on the compass. 

The fourth major obstace I had to overcome when making this project was 
involved in creating the obeyPlan() function since I could not make the 
program consistently set nsteps to the maximum number of steps that the 
car can travel before running into a wall. To fix this, I had to declare a 
variable, set it to determineSafeDistance(sr, sc, dir, maxsteps), and use 
that variable for all the future operations that are used to move the car 
in one of the four directions depending on the character of the plan the 
iterator is on.




part b)

My hasCorrectForm() function first checks to see which parts of the plan 
string are plan portions. It then checks for whether the turn letter is in 
the first, second, or third character of the plan portion. If such a 
letter is not found by the time the iterator reaches the third character 
of the plan string or if the string is shorter and a valid turn letter is 
not found by the time the iterator reaches the end of the string, then the 
function returns false. If the iterator reaches the end of the plan string 
successfully without returning false, then the function returns true. The 
following psuedocode shows hasCorrectForm()

define hasCorrectForm function:
  start at first plan portion
  repeatedly:
    if plan portion is only only one direction letter,
      proceed to next plan portion
    else if plan portion consists of one number followed by a valid 
    direction letter,
      proceed to next plan portion
    else if plan portion consists of two numbers followed by a valid 
    direction letter,
      proceed to next plan portion
    else,
      return false
  return true



My determineSafeDistace() function has four helper functions to handle 
each of the four possible directions the car can face (North, South, East, 
West). For each of the four functions, it returns -1 if (r, c) is either a 
wall or off the grid and return either the distance the car can travel 
without hitting a wall if one is in the way or the max distance the 
function's parameters will take it. The following psuedocode shows 
hasCorrectForm() and its four helper functions determineSafeDistanceNorth()
, determineSafeDistanceEast(), determineSafeDistanceSouth(), and 
determineSafeDistanceWest()

define determineSafeDistanceNorth function:
  return -1 if (r, c) is a wall or is off the grid
  repeatedly:
    if(counter, c) is the index of a wall,
      return r - counter - 1
  return r - 1

define determineSafeDistanceEast function:
  return -1 if (r, c) is a wall of is off the grid
  repeatedly:
    if (r, counter) is the index of a wall,
      return counter - c - 1
  return difference between number of columns of grid and c

define determineSafeDistanceSouth function:
  return -1 if (r, c) is a wall or is off the grid
  repeatedly:
    if (counter, c) is a wall,
      return counter - r - 1
  reutrn difference btween number of rows of grid and r

define determineSafeDistanceWest function:
  return -1 if (r, c) is a wall or is off the grid
  repeatedly:
    if (r, counter) is a wall,
      return c - counter - 1
  return c - 1

define determineSafeDistance function:
  return -1 if maxSteps is either negative, off the grid, or if starting 
  point of car is a wall
  return maximum possible steps taken in given direction determined from 
  calling of determineCorrectDistance(insert direction) function if 
  proposed steps taken causes car to land on a wall or go off the grid
  return proposed steps taken in given direction determined from calling 
  of determineCorrectDistance(insert direction) function if proposed steps 
  taken does not cause car to land on a wall or off the grid



My obeyPlan() function first returns 2 if either (sr,sc) or (er,ec) are 
not valid empty grid positions, dir is not a direction letter, or if the 
plan string is not a plan. Otherwise, it then loops through the plan 
string to check if a letter is a turn letter. If the iterator finds a turn 
letter, it directly changes dir depending on itself and whether the turn 
letter indicates left or right. If not, then it declares a variable that 
iterates and eventually stores the maximum amount of steps that the car 
can take. It then converts the character into a digit. Next, it declares 
the variable steps and sets it to determineSafeDistance(sr, sc, dir, 
maxsteps). if steps is not equal to the maxSteps, then it adds steps to 
steps and returns 3. Otherwise, it increments or decrements either sr or 
sc by steps depending on the current value of dir. To end of fthe function,
the function returns 0 if sr = er and sc = ec and 1 if otherwise. The 
folowing psuedocode describes my obeyPlan function

define obeyPlan function:
  declare directions as string of all valid direction characters
  return 2 if (sr,sc) or (er,ec) are outside of the grid or on a walls
  return 2 if given direction character does not properly indicate a 
  direction
  set nsteps equal to 0
  repeatedly:

    if current letter of plan string indicates turning left,
      if letter indicates north,
        switch direction letter to indicate west
      else if letter indicates east,
        switch direction letter to indicate north
      else if letter indicates south
        switch direction letter to indicate east
      else,
        switch direction letter to indicate south

      else if current letter of plan string indicatres turning right,
        if direction letter indicates north,
          switch direction letter to indicate east
      else if direction letter indicates east,
        switch direction letter to indicate sotuh
      else if direction leter indicates south,
        switch direction letter to indicate west
      else 
        switch direction letter to indicate north

    else,
      declare maxsteps as an integer variable and set it equal to 0
      if current character of plan is a number,
        convert character to an integer
        increment counter by 1
      else,
        convert character to an integer
      declare steps as an integer variable and set it to 
      determineSafeDistance(sr, sc, dir, maxsteps)
      if steps is not equal to maxsteps, 
        increment nsteps by steps and return 3 
      else,
        increment nsteps by steps 
        decrement sr by steps if dir indicates north
        increment sc by steps if dir indicates east
        increment sr by steps if dir indicates south
        decrement sc by steps if dir indicates west
  return 0 if car's final position is the goal position
  return 1 if car's final positon is not the goal position but can safely 
  navigate the maze with the given parameters
      
     
  


part c)

Test cases will use a grid of three rows and four columns with walls at (1,4), (2,2), and (3,2)
  setSize(3,4);
  setWall(3,2);
  setWall(1,4);
  setWall(2,2);

Format of Test Cases for hasCorrectForm(): (plan)
  Test Case #1: valid plan format with L at end 
    hasCorrectForm("5rL00L0R09R7L") == true
  Test Case #2: valid plan format with r at end
    hasCorrectForm("RRRRRRRRRRRRR00l00r0L0R9RLLLLLL29l75r") == true
  Test Case #3: valid plan format with l at end 
    hasCorrectForm("42l") == true
  Test Case #4: valid plan format that only contains R 
    hasCorrectForm("R") == true
  Test Case #5: valid plan format with r behind one number 
    hasCorrectForm("3r") == true
  Test Case #6: invalid plan format with number before last letter 
    hasCorrectForm("L2") == false
  Test Case #7: invalid plan with invalid plan characters 
    hasCorrectForm("w2+n3") == false
  Test Case #8: invalid plan with invalid turn character at end  
    hasCorrectForm("2R1N") == false
  Test Case #9: plan is empty string
    hasCorrectForm("") == true

Test Cases for determineSafeDistance(): (r, c, dir, maxSteps)
  Test Case #10: (r,c) is not a valid grid position 
    determineSafeDistance(5, 5, 's', 1) == -1
  Test Case #11: dir is not a direction letter 
    determineSafeDistance(1, 1, 3, 2) == -1
  Test Case #12: maxSteps is negative 
    determineSafeDistanece(2, 1, 'N', -1) == -1
  Test Case #13: correctly determines safe distance with given direction 
  and a valid starting position 
    determineSafeDistance(1, 1, 'e', 2) == 2
  Test Case #14: car starts in valid empty grid position but runs into a 
  wall 
    assert(determineSafeDistance(2, 3, 'w', 1) == 0)
  Test Case #15: car successfully travels in given direction and number of 
  steps
    assert(determineSafeDistance(1, 3, 'w', 2)==2)
  Test Case #16: car successfully runs with given commands in the north 
  direction:
    assert(determineSafeDistance(2, 1, 'n', 1)==1)
  Test case #17: car successfully runs with given commands in the east 
  direction 
    assert(determineSafeDistance(1, 1, 'e', 3)==2);

Format of Test Cases for obeyPlan(): (sr, sc, dir, er, ec, plan, nsteps)
  Test Case #18:  (sr,sc) and (er,ec) are empty grid positions, dir is a 
  direction letter, plan is an obeyable plan, and car ends up at (er, ec)
    obeyPlan(1, 1, 1, 2, 'e', "1R", steps) == 0 && steps==1
  Test Case #19: (sr,sc) and (er,ec) are empty grid positions, dir is a 
  direction letter, and plan is an obeyable plan but car does not end up 
  at (er, ec)
    obeyPlan(1, 1, 1, 3, 'e', "1R", steps) == 1 && steps==1 
  Test Case #20: (sr,sc) is not a valid empty grid position: 
    obeyPlan(5, 5, 1, 2, 's',"1R", steps) == 2
  Test Case #21: (er, ec) is not a valid empty grid position: 
    assert(obeyPlan(1, 1, 4, 5, 'n', "1R", steps) ==2)
  Test Case #22: dir character is not a direction letter: 
    assert(obeyPlan(1, 1, 4, 4, 'x', "123R", steps) == 2)
  Test Case #23: plan string is not a valid plan: 
    obeyPlan(1, 1, 'r', 4, 5, "123R", 1) == 2
  Test Case #24: (sr,sc) and (er,ec) are empty grid positions and dir is a 
  direction letter and the plan string is a plan, but the car could not 
  obey the complete plan without moving to a cell containing a wall or 
  running off the edge of the grid: 
    obeyPlan(3, 1, 3, 4, 's', "LL2R3r", steps) == 3 && steps == 4
